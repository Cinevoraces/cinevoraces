generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model country {
  id                Int                 @id @default(autoincrement())
  name              String
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  movie_has_country movie_has_country[]

  @@index([id], map: "country_idx")
}

model genre {
  id              Int               @id @default(autoincrement())
  name            String
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  movie_has_genre movie_has_genre[]

  @@index([id], map: "genre_idx")
}

model language {
  id                 Int                  @id @default(autoincrement())
  name               String
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  movie_has_language movie_has_language[]

  @@index([id], map: "language_idx")
}

model movie {
  id                 Int                  @id @default(autoincrement())
  french_title       String
  original_title     String
  poster_url         String
  directors          String[]
  release_date       DateTime             @db.Date
  runtime            Int
  casting            String[]
  presentation       String
  is_published       Boolean?             @default(false)
  publishing_date    DateTime             @db.Date
  user_id            Int
  season_id          Int
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @db.Timestamptz(6)
  season             season               @relation(fields: [season_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user               user                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  movie_has_country  movie_has_country[]
  movie_has_genre    movie_has_genre[]
  movie_has_language movie_has_language[]
  review             review[]

  @@index([id], map: "movie_idx")
}

model movie_has_country {
  movie_id   Int
  country_id Int
  created_at DateTime @default(now()) @db.Timestamptz(6)
  country    country  @relation(fields: [country_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  movie      movie    @relation(fields: [movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([movie_id, country_id])
  @@index([movie_id, country_id], map: "movie_has_country_idx")
}

model movie_has_genre {
  movie_id   Int
  genre_id   Int
  created_at DateTime @default(now()) @db.Timestamptz(6)
  genre      genre    @relation(fields: [genre_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  movie      movie    @relation(fields: [movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([movie_id, genre_id])
  @@index([movie_id, genre_id], map: "movie_has_genre_idx")
}

model movie_has_language {
  movie_id    Int
  language_id Int
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  language    language @relation(fields: [language_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  movie       movie    @relation(fields: [movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([movie_id, language_id])
  @@index([movie_id, language_id], map: "movie_has_language_idx")
}

model proposition_slot {
  id              Int      @id @default(autoincrement())
  season_number   Int
  episode         Int
  publishing_date DateTime @db.Date
  is_booked       Boolean? @default(false)
  season          season   @relation(fields: [season_number], references: [number], onDelete: NoAction, onUpdate: NoAction)
}

model review {
  user_id    Int
  movie_id   Int
  bookmarked Boolean   @default(false)
  viewed     Boolean   @default(false)
  liked      Boolean   @default(false)
  rating     Int?
  comment    String?
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  movie      movie     @relation(fields: [movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, movie_id])
  @@index([movie_id, user_id], map: "review_idx")
}

model season {
  id               Int                @id @default(autoincrement())
  number           Int                @unique
  year             Int                @unique
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  movie            movie[]
  proposition_slot proposition_slot[]

  @@index([id], map: "season_idx")
}

model user {
  id         Int       @id @default(autoincrement())
  pseudo     String    @unique
  mail       String    @unique
  password   String
  avatar_url String?
  mail_sub   Boolean?  @default(false)
  role       String    @default("user")
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  movies     movie[]
  reviews    review[]

  @@index([id], map: "user_idx")
}
