export default {
  error: expect.objectContaining({
    message: expect.any(String),
    statusCode: expect.any(Number),
  }),
  
  movie: expect.objectContaining({
    id: expect.any(Number),
    author_id: expect.any(Number),
    season_number: expect.any(Number),
    is_published: expect.any(Boolean),
    french_title: expect.any(String),
    original_title: expect.any(String),
    poster_url: expect.any(String),
    publishing_date: expect.any(String),
  }),
  movieFullObject: expect.objectContaining({
    id: expect.any(Number),
    author_id: expect.any(Number),
    season_number: expect.any(Number),
    is_published: expect.any(Boolean),
    french_title: expect.any(String),
    original_title: expect.any(String),
    poster_url: expect.any(String),
    publishing_date: expect.any(String),
    casting: expect.any(Array),
    directors: expect.any(Array),
    runtime: expect.any(Number),
    release_date: expect.any(String),
    genres: expect.any(Array),
    countries: expect.any(Array),
    languages: expect.any(Array),
    presentation: expect.any(Object),
    metrics: expect.any(Object),
    comments: expect.any(Array),
  }),
  proposition: expect.objectContaining({
    id: expect.any(Number),
    french_title: expect.any(String),
    poster_url: expect.any(String),
    directors: expect.any(Array),
    genres: expect.any(Array),
    release_date: expect.any(String),
    user_id: expect.any(Number),
    user_pseudo: expect.any(String),
    publishing_date: expect.any(String),
    presentation: expect.any(String),
  }),
  review: expect.objectContaining({
    movie_id: expect.any(Number),
    author_id: expect.any(Number),
    author_pseudo: expect.any(String),
    author_mail: expect.any(String),
    author_role: expect.any(String),
    author_avatar: expect.any(String),
    member_since: expect.any(Number),
    comment: expect.any(String),
    movie: expect.objectContaining({
      french_title: expect.any(String),
      original_title: expect.any(String),
      poster_url: expect.any(String),
      publishing_date: expect.any(String),
      season_id: expect.any(Number),
    })
  }),
  slot: expect.objectContaining({
    id: expect.any(Number),
    season_number: expect.any(Number),
    episode: expect.any(Number),
    publishing_date: expect.any(String),
    is_booked: expect.any(Boolean),
  }),
  user: expect.objectContaining({
    id: expect.any(Number),
    pseudo: expect.any(String),
    mail: expect.any(String),
    avatar_url: expect.any(String),
    role: expect.any(String),
    created_at: expect.anything(),
  }),
  userWithReviews: expect.objectContaining({
    id: expect.any(Number),
    pseudo: expect.any(String),
    mail: expect.any(String),
    avatar_url: expect.any(String),
    role: expect.any(String),
    created_at: expect.anything(),
    reviews: expect.anything(),
  }),
  userWithMoviesReviewsAndMetrics: expect.objectContaining({
    id: expect.any(Number),
    pseudo: expect.any(String),
    mail: expect.any(String),
    avatar_url: expect.any(String),
    role: expect.any(String),
    created_at: expect.anything(),
    propositions: expect.anything(),
    reviews: expect.anything(),
    metrics: expect.anything(),
  }),
  loginResponse: expect.objectContaining({
    user: expect.objectContaining({
      id: expect.any(String),
      pseudo: expect.any(String),
      mail: expect.any(String),
      role: expect.any(String),
      avatar_url: expect.any(String),
    }),
    token: expect.any(String),
    response: expect.any(String)
  }),
  refreshToken: expect.objectContaining({ 
    name: 'refresh_token',
    value: expect.any(String)
  })
};
